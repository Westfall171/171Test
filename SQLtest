-- Enable UUID generation if needed, otherwise use SERIAL
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users Table: Stores basic account information
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    -- user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Alternative: Use UUIDs
    email TEXT UNIQUE NOT NULL CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
    password_hash TEXT NOT NULL,
    full_name TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Roles Table: Defines the possible user roles
CREATE TABLE roles (
    role_id SERIAL PRIMARY KEY,
    role_name TEXT UNIQUE NOT NULL -- e.g., 'Buyer', 'Seller', 'Transporter', 'Stocker'
);

-- Populate Roles
INSERT INTO roles (role_name) VALUES ('Buyer'), ('Seller'), ('Transporter'), ('Stocker');

-- UserRoles Table: Junction table linking users to the roles they've opted into
CREATE TABLE user_roles (
    user_role_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    role_id INT NOT NULL REFERENCES roles(role_id) ON DELETE CASCADE,
    is_active BOOLEAN DEFAULT TRUE NOT NULL,
    role_specific_details JSONB, -- Store structured data like transporter range, seller pickup notes etc.
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE (user_id, role_id) -- A user can only have each role once
);

-- Locations Table: Stores addresses associated with users
CREATE TABLE locations (
    location_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    purpose TEXT NOT NULL, -- e.g., 'Default Delivery', 'Seller Pickup', 'Stocker Storage'
    address_line1 TEXT,
    address_line2 TEXT,
    city TEXT,
    postal_code TEXT,
    country TEXT,
    latitude DECIMAL(10, 8), -- For map integration
    longitude DECIMAL(11, 8), -- For map integration
    is_primary_for_purpose BOOLEAN DEFAULT FALSE NOT NULL, -- e.g. the main Seller Pickup Location
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Items Table: Represents the unique goods listed for sale
CREATE TABLE items (
    item_id SERIAL PRIMARY KEY,
    seller_user_id INT NOT NULL REFERENCES users(user_id), -- The original lister
    title TEXT NOT NULL,
    description TEXT,
    price DECIMAL(12, 2) NOT NULL CHECK (price >= 0), -- Assuming currency like USD/EUR
    category TEXT,
    photos JSONB, -- Array of image URLs, e.g., ['url1', 'url2']
    status TEXT NOT NULL DEFAULT 'available' CHECK (status IN ('available', 'in_transaction', 'sold', 'archived')),
    current_holder_user_id INT NOT NULL REFERENCES users(user_id), -- Who physically possesses it now
    pickup_location_id INT REFERENCES locations(location_id), -- Location Seller specified for pickup
    is_stocker_managed BOOLEAN DEFAULT FALSE NOT NULL,
    stocker_user_id INT REFERENCES users(user_id), -- FK if managed by a stocker
    stocker_fee_proposal DECIMAL(10, 2) CHECK (stocker_fee_proposal IS NULL OR stocker_fee_proposal >= 0), -- Fixed fee proposed by seller
    delivery_fee_proposal DECIMAL(10, 2) CHECK (delivery_fee_proposal IS NULL OR delivery_fee_proposal >= 0), -- Base delivery fee proposed by seller
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
    -- Constraint to ensure stocker_user_id is set if is_stocker_managed is true? Maybe handle in app logic.
);

-- Orders Table: The central record for a transaction agreement
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    item_id INT UNIQUE NOT NULL REFERENCES items(item_id), -- Each unique item can only be in one order
    buyer_user_id INT NOT NULL REFERENCES users(user_id),
    seller_user_id INT NOT NULL REFERENCES users(user_id), -- Denormalized from item for easier querying
    transporter_user_id INT REFERENCES users(user_id), -- Assigned when a transporter accepts
    stocker_user_id INT REFERENCES users(user_id), -- Denormalized from item if applicable
    final_item_price DECIMAL(12, 2) NOT NULL, -- Price at time of order creation
    agreed_delivery_fee DECIMAL(10, 2), -- Final fee agreed upon, might differ from proposal
    agreed_storage_fee_split DECIMAL(10, 2), -- Final stocker fee split agreed upon
    total_agreed_amount DECIMAL(12, 2) NOT NULL, -- Calculated: final_item_price + agreed_delivery_fee
    order_status TEXT NOT NULL DEFAULT 'Pending Confirmation' CHECK (order_status IN (
        'Pending Confirmation', -- Buyer initiated, Seller needs to confirm
        'Ready for Pickup', -- Seller confirmed, awaiting Transport acceptance or Buyer pickup coordination
        'Awaiting Transport Acceptance', -- Transport needed, job is open
        'Transport Accepted', -- Transporter assigned, awaiting physical pickup
        'Pickup Confirmed by Initiator', -- Seller/Stocker confirms handover started
        'Pickup Confirmed', -- Transporter confirms receiving item (Handshake complete)
        'In Transit', -- Transporter marks item as in transit
        'Delivery Confirmed by Initiator', -- Transporter confirms handover started
        'Delivery Confirmed', -- Buyer confirms receiving item (Handshake complete)
        'Completed', -- Transaction finished successfully
        'Disputed', -- Dispute raised (handled externally)
        'Cancelled', -- Order cancelled by a party
        'Flagged for Review' -- Handshake issue flagged for admin
    )),
    buyer_delivery_location_id INT REFERENCES locations(location_id), -- Buyer's specified delivery location
    needs_admin_review BOOLEAN DEFAULT FALSE NOT NULL,
    admin_review_notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- OrderStatusHistory Table: Audit trail of status changes for an order
CREATE TABLE order_status_history (
    history_id SERIAL PRIMARY KEY,
    order_id INT NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
    status TEXT NOT NULL, -- The status being set
    timestamp TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_by_user_id INT REFERENCES users(user_id), -- Who triggered the change (NULL if system)
    notes TEXT -- e.g., 'Buyer confirmed receipt via app', 'Seller flagged handshake issue'
);

-- Ratings Table: Stores user ratings related to specific orders and roles
CREATE TABLE ratings (
    rating_id SERIAL PRIMARY KEY,
    order_id INT NOT NULL REFERENCES orders(order_id),
    rater_user_id INT NOT NULL REFERENCES users(user_id),
    rated_user_id INT NOT NULL REFERENCES users(user_id),
    rated_role_id INT NOT NULL REFERENCES roles(role_id), -- Role the rated user performed in this order
    score INT NOT NULL CHECK (score >= 1 AND score <= 5),
    comment TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE (order_id, rater_user_id, rated_user_id, rated_role_id) -- Prevent duplicate ratings
);

-- ChatMessages Table: Stores messages scoped to a specific order
CREATE TABLE chat_messages (
    message_id SERIAL PRIMARY KEY,
    order_id INT NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
    sender_user_id INT NOT NULL REFERENCES users(user_id),
    message_text TEXT NOT NULL,
    sent_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    is_read BOOLEAN DEFAULT FALSE NOT NULL -- Basic read status tracking
);

-- Indexes for performance
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_user_roles_user_id ON user_roles(user_id);
CREATE INDEX idx_user_roles_role_id ON user_roles(role_id);
CREATE INDEX idx_locations_user_id ON locations(user_id);
CREATE INDEX idx_items_seller_user_id ON items(seller_user_id);
CREATE INDEX idx_items_status ON items(status);
CREATE INDEX idx_items_current_holder_user_id ON items(current_holder_user_id);
CREATE INDEX idx_orders_item_id ON orders(item_id); -- Already unique, but good for lookups
CREATE INDEX idx_orders_buyer_user_id ON orders(buyer_user_id);
CREATE INDEX idx_orders_seller_user_id ON orders(seller_user_id);
CREATE INDEX idx_orders_transporter_user_id ON orders(transporter_user_id);
CREATE INDEX idx_orders_order_status ON orders(order_status);
CREATE INDEX idx_order_status_history_order_id ON order_status_history(order_id);
CREATE INDEX idx_ratings_order_id ON ratings(order_id);
CREATE INDEX idx_ratings_rated_user_id ON ratings(rated_user_id);
CREATE INDEX idx_chat_messages_order_id ON chat_messages(order_id);
CREATE INDEX idx_chat_messages_sent_at ON chat_messages(sent_at);

-- Trigger function to update 'updated_at' columns automatically
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to tables with 'updated_at'
CREATE TRIGGER set_timestamp_users BEFORE UPDATE ON users FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();
CREATE TRIGGER set_timestamp_locations BEFORE UPDATE ON locations FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();
CREATE TRIGGER set_timestamp_items BEFORE UPDATE ON items FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();
CREATE TRIGGER set_timestamp_orders BEFORE UPDATE ON orders FOR EACH ROW EXECUTE PROCEDURE trigger_set_timestamp();
